import streamlit as st
import pandas as pd
import psycopg2
import hashlib
import io
import os
from typing import List, Optional
from supabase import create_client, Client

import streamlit as st
import base64
# CSS ƒë·ªÉ ƒë·∫∑t ·∫£nh n·ªÅn
def set_background(image_url):
    bg_css = f"""
    <style>
    .stApp {{
        background-image: url("{image_url}");
        background-size: 100% 100%;
        background-position: center;
        background-repeat: no-repeat;
    }}
    </style>
    """
    st.markdown(bg_css, unsafe_allow_html=True)

# N·∫øu ·∫£nh l√† file c·ª•c b·ªô, l∆∞u tr√™n GitHub r·ªìi d√πng raw URL
image_url = "https://raw.githubusercontent.com/dangdung287/locemail/main/logo.jpeg"
set_background(image_url)

# Hardcoded credentials for local development (REMOVE IN PRODUCTION!)
SUPABASE_URL = "https://ltnmxrecdwvuhdtwegsm.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx0bm14cmVjZHd2dWhkdHdlZ3NtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3ODgzODQsImV4cCI6MjA1ODM2NDM4NH0.VUwvYcdtE3O9Pjoyza1842flkDPNZhUokR7qwk-zjeY"
DATABASE_URL = "postgresql://postgres.ltnmxrecdwvuhdtwegsm:Aa36579819$@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres"

# Th√™m salt cho m√£ h√≥a m·∫≠t kh·∫©u
PASSWORD_SALT = "GLOBAL_LOGISTICS_SALT_2025"

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def get_db_connection():
    """K·∫øt n·ªëi ƒë·∫øn PostgreSQL."""
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi database: {e}")
        return None

def hash_password(password):
    """M√£ h√≥a m·∫≠t kh·∫©u b·∫±ng SHA-256 v·ªõi salt."""
    return hashlib.sha256((password + PASSWORD_SALT).encode()).hexdigest()

def get_users():
    """L·∫•y danh s√°ch ng∆∞·ªùi d√πng t·ª´ Supabase."""
    try:
        response = supabase.table("users").select("*").execute()
        return pd.DataFrame(response.data) if response.data else pd.DataFrame()
    except Exception as e:
        st.error(f"L·ªói truy xu·∫•t ng∆∞·ªùi d√πng: {e}")
        return pd.DataFrame()

def add_user(username, password, is_admin=False):
    """Th√™m ng∆∞·ªùi d√πng m·ªõi v√†o Supabase."""
    # Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u
    if len(password) < 8:
        st.error("M·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 8 k√Ω t·ª±!")
        return False
    
    role = "admin" if is_admin else "user"
    hashed_password = hash_password(password)
    
    try:
        supabase.table("users").insert({
            "username": username,
            "password": hashed_password,
            "role": role
        }).execute()
        return True
    except Exception as e:
        st.error(f"L·ªói th√™m ng∆∞·ªùi d√πng: {e}")
        return False

def create_admin_account():
    """T·∫°o t√†i kho·∫£n admin n·∫øu ch∆∞a t·ªìn t·∫°i."""
    users = get_users()
    if "admin" not in users["username"].values:
        if add_user("admin", "Admin@2025!", is_admin=True):
            st.success("‚úÖ Admin ƒë√£ ƒë∆∞·ª£c t·∫°o! User: admin | Pass: Admin@2025!")

def authenticate(username, password):
    """X√°c th·ª±c ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng."""
    hashed_password = hash_password(password)
    try:
        response = supabase.table("users").select("*").eq("username", username).eq("password", hashed_password).execute()
        if response.data:
            return response.data[0]["role"] == "admin"
        return None
    except Exception as e:
        st.error(f"L·ªói x√°c th·ª±c: {e}")
        return None

def add_emails_to_database(emails):
    """Th√™m email v√†o c∆° s·ªü d·ªØ li·ªáu."""
    conn = get_db_connection()
    if not conn:
        return
    
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS emails (
            email TEXT PRIMARY KEY,
            added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # L·ªçc email h·ª£p l·ªá
    valid_emails = [email for email in emails if '@' in email]
    
    for email in valid_emails:
        cursor.execute("INSERT INTO emails (email) VALUES (%s) ON CONFLICT (email) DO NOTHING", (email,))
    
    conn.commit()
    conn.close()
    st.success(f"Th√™m {len(valid_emails)} email th√†nh c√¥ng!")

def filter_emails(uploaded_file):
    """L·ªçc email tr√πng l·∫∑p."""
    if uploaded_file is not None:
        try:
            df = pd.read_excel(uploaded_file)
            if "email" not in df.columns:
                st.error("File ph·∫£i c√≥ c·ªôt 'email'.")
                return
            
            emails_to_check = set(df["email"].dropna().tolist())
            
            conn = get_db_connection()
            if not conn:
                return
            
            cursor = conn.cursor()
            cursor.execute("SELECT email FROM emails")
            existing_emails = {row[0] for row in cursor.fetchall()}
            conn.close()
            
            unique_emails = emails_to_check - existing_emails
            
            output = io.BytesIO()
            pd.DataFrame({"email": list(unique_emails)}).to_excel(output, index=False, engine="openpyxl")
            output.seek(0)
            
            st.download_button(
                label="T·∫£i danh s√°ch email h·ª£p l·ªá", 
                data=output, 
                file_name="filtered_emails.xlsx", 
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        except Exception as e:
            st.error(f"L·ªói x·ª≠ l√Ω file: {e}")

def login_page():
    """Giao di·ªán ƒëƒÉng nh·∫≠p."""
    st.title("üîë ƒêƒÉng nh·∫≠p")
    # Th√™m key duy nh·∫•t cho c√°c input
    username = st.text_input("T√™n ƒëƒÉng nh·∫≠p", key="login_username")
    password = st.text_input("M·∫≠t kh·∫©u", type="password", key="login_password")
    
    if st.button("ƒêƒÉng nh·∫≠p", key="login_button"):
        is_admin = authenticate(username, password)
        if is_admin is not None:
            st.session_state["logged_in"] = True
            st.session_state["username"] = username
            st.session_state["is_admin"] = is_admin
            st.rerun()
        else:
            st.error("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!")

def register_page():
    """Giao di·ªán ƒëƒÉng k√Ω t√†i kho·∫£n."""
    st.title("üìù ƒêƒÉng k√Ω t√†i kho·∫£n")
    # Th√™m key duy nh·∫•t cho c√°c input
    username = st.text_input("T√™n ƒëƒÉng nh·∫≠p", key="register_username")
    password = st.text_input("M·∫≠t kh·∫©u", type="password", key="register_password")
    confirm_password = st.text_input("X√°c nh·∫≠n m·∫≠t kh·∫©u", type="password", key="register_confirm_password")
    
    if st.button("ƒêƒÉng k√Ω", key="register_button"):
        users = get_users()
        
        if username in users["username"].values:
            st.error("T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i!")
        elif password != confirm_password:
            st.error("M·∫≠t kh·∫©u kh√¥ng kh·ªõp!")
        elif len(password) < 8:
            st.error("M·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 8 k√Ω t·ª±!")
        else:
            if add_user(username, password):
                st.success("ƒêƒÉng k√Ω th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p.")
                st.rerun()

def main_page():
    """Giao di·ªán ch√≠nh sau khi ƒëƒÉng nh·∫≠p."""
    st.title("üìß GLOBAL LOGISTICS & TRADING CO., LTD")
    
    email = st.text_input("Nh·∫≠p ƒë·ªãa ch·ªâ email:", key="main_email")
    if st.button("Th√™m Email", key="add_email_button"):
        if email:
            add_emails_to_database([email])
        else:
            st.warning("Vui l√≤ng nh·∫≠p email!")
    
    uploaded_file = st.file_uploader("T·∫£i file Excel", type=["xlsx"], key="excel_uploader")
    if uploaded_file:
        filter_emails(uploaded_file)
    
    if st.session_state.get("is_admin", False):
        st.subheader("Danh s√°ch Ng∆∞·ªùi d√πng")
        df = get_users()
        st.dataframe(df[['username', 'role']])
    
    # N√∫t ƒëƒÉng xu·∫•t
    if st.button("ƒêƒÉng xu·∫•t", key="logout_button"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()

def main():
    """ƒêi·ªÉm ƒë·∫ßu v√†o ch√≠nh c·ªßa ·ª©ng d·ª•ng."""
    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = False
    
    if not st.session_state["logged_in"]:
        tab1, tab2 = st.tabs(["üîë ƒêƒÉng nh·∫≠p", "üìù ƒêƒÉng k√Ω"])
        with tab1:
            login_page()
        with tab2:
            register_page()
    else:
        main_page()

if __name__ == "__main__":
    # T·∫°o t√†i kho·∫£n admin l·∫ßn ƒë·∫ßu
    create_admin_account()
    main()
